#include <stdio.h>
#include<stdlib.h>


struct abc
{
    int data;
    struct abc *next;
};

struct abc *head;

void insertbeginning();
void insertintermediate();
void insertend();
void deletebeginning();
void deleteintermediate();
void deleteend();
void sortlinkedlist();
void reverselinkedlist();
void display();

void create()
{
    struct abc* new,*temp;
    int n,i,d;
    temp=head;
    printf("enter no of nodes:");
    scanf("%d",&n);
    for(i=1;i<n;i++)
    {
        new=(struct abc *)malloc(sizeof(struct abc));
        printf("Data of %d node\n",i+1);
        printf("Value is:");
        scanf("%d",&d);
        new->data=d;
        new->next=NULL;
        temp->next=new;
        temp=temp->next;
    }
}



int main() {
    int d,ch,pos;;
    head=(struct abc*)malloc(sizeof(struct abc));
    printf("enter data;");
    scanf("%d",&d);
    head->data=d;
    head->next=NULL;
    create();
    do
    {
    printf("enter choice:\n");
    scanf("%d",&ch);
    switch(ch)
    {
        case 1:printf("enter the data:");
               scanf("%d",&d);
               insertbeginning();
               break;
        case 2:printf("enter the data:");
               scanf("%d",&d);
               insertintermediate();
               break; 
        case 3:insertend();
               break;
        case 4:deletebeginning();
            break;
        case 5:printf("enter position:");
               scanf("%d",&pos);
               deleteintermediate(pos);
               break;
        case 6:deleteend();
                break;
        case 7:sortlinkedlist();
               break;
        case 8:reverselinkedlist();
               break;
        case 9:display();
               break;
        
   }
} while(ch>0);

    return 0;
}


void insertbeginning(int d)
{
    struct abc *new;
    new=new=(struct abc *)malloc(sizeof(struct abc));
    new->data=d;
    new->next=NULL;
    new->next=head;
    head=new;
}
void sort()
{
    struct abc*temp,*new;
    temp=head;
    int p;
    while(temp!=NULL)
    {
        new=head;
            while(new->next!=NULL)
            {
                if(temp->data>new->data)
                {
                    p=temp->data;
                    temp->data=new->data;
                    new->data=p;
                }
            }new=new->next;
        }
        temp=temp->next;
    
}
void display()
{
    struct abc *temp;
    temp=head;
    if(head==NULL)
    {
        printf("LINKED LIST IS EMPTY");
    }
    else
    {
        while(temp!=NULL)
        {
            printf("%d",temp->data);
            temp=temp->next;
        }
    }
}

    
    
    // Write C code here
    


